{
  "src/ts/components/FlexLayout.tsx": {
    "displayName": "FlexLayout",
    "description": "Component description",
    "props": {
      "font": {
        "description": "the tab font (overrides value in css). Example: font={{size:\"12px\", style:\"italic\"}}",
        "required": false,
        "type": {
          "name": "any",
          "raw": "any"
        }
      },
      "supportsPopout": {
        "description": "if left undefined will do simple check based on userAgent",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "popoutURL": {
        "description": "URL of popout window relative to origin, defaults to popout.html",
        "required": false,
        "defaultValue": {
          "value": "'/assets/popout.html'",
          "computed": false
        },
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "realtimeResize": {
        "description": "boolean value, defaults to false, resize tabs as splitters are dragged. Warning: this can cause resizing to become choppy when tabs are slow to draw",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "model": {
        "description": "Model layout.",
        "required": true,
        "type": {
          "name": "any",
          "raw": "any"
        }
      },
      "children": {
        "description": "List of children to be rendered. Children are allocated to their respective tab\nbased on the ID of the element.\n\nWARNING: There is no validation done on whether the children here will be rendered in any tab.\nIf there is no matching tab for a particular ID, that element will be silently ignored in\nrendering (although callbacks will still be applied).",
        "required": true,
        "type": {
          "name": "node",
          "raw": "Element"
        }
      },
      "headers": {
        "description": "Map of headers to render for each tab. Uses the `onRenderTab` function to override\nthe default headers, where a custom header mapping is supplied.\n\nNote: where possible, it is likely better to use the",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "string": {
              "description": "",
              "required": true,
              "name": "node",
              "raw": "Element"
            }
          },
          "raw": "{ string: Element; }"
        }
      },
      "useStateForModel": {
        "description": "Flag that we should use internal state to manage the layout. If the layout is not being\nused by dash anywhere (for example, saving and re-hydrating the layout), it is more efficient\nto use the internal state (as this limits the number of round trips between JSON\nand the Model object).\n\nWARNING: If you set this, do not expect the dash property `model` to reflect the current\nstate of the layout!",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "debugMode": {
        "description": "",
        "required": false,
        "type": {
          "name": "bool",
          "raw": "boolean"
        }
      },
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": false,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "setProps": {
        "description": "Update props to trigger callbacks.",
        "required": true,
        "type": {
          "name": "func",
          "raw": "(props: Record<string, any>) => void"
        }
      }
    },
    "isContext": false
  },
  "src/ts/components/Tab.tsx": {
    "displayName": "Tab",
    "description": "This is a simple component that holds content to be rendered within a Tab.\nTakes an ID that corresponds to a particular tab in the layout.",
    "props": {
      "id": {
        "description": "Unique ID to identify this component in Dash callbacks.",
        "required": true,
        "type": {
          "name": "string",
          "raw": "string"
        }
      },
      "children": {
        "description": "Children to render within Tab",
        "required": false,
        "type": {
          "name": "node",
          "raw": "ReactNode"
        }
      }
    },
    "isContext": false
  }
}